head(x)
tail(x)
y1 <- x^(2/3) + sqrt(1 - x^2)
head(y1)
x[1,1]^(2/3)
(x[1,1])^(2/3)
-1^(2/3)
-1 == x[1,1]
y1 <- as.double(x)^(2/3) + sqrt(1 - x^2)
class(x[1,1])
tmp <- -1.0
x <- data.frame()
for (i in 1:20001){
x[i,1] <- tmp
tmp <- tmp + (1 / 10000)
}
head(x)
tail(x)
y1 <- x^(2/3) + sqrt(1 - x^2)
head(y1)
tmp <- -1.0
x <- data.frame()
for (i in 1:20001){
x[i,1] <- as.double(tmp)
tmp <- tmp + (1 / 10000)
}
head(y1)
head(x)
y1 <- x^(2/3) + sqrt(1 - x^2)
head(y1)
y1 <- (-x)^(2/3) + sqrt(1 - x^2)
head(y1)
tail(y1)
y1 <- data.frame()
y1 <- data.frame()
for(i in 1:20001){
y1[i,1] <- if(x[i,1] < 0){
-(-x[i,1])^(2/3) + sqrt(1 - x^2)
} else {
(x[i,1])^(2/3) + sqrt(1 - x^2)
}
}
y1 <- data.frame()
for(i in 1:20001){
y1[i,1] <- if(x[i,1] < 0){
-(-x[i,1])^(2/3) + sqrt(1 - x[i,1]^2)
} else {
(x[i,1])^(2/3) + sqrt(1 - x[i,1]^2)
}
}
head(y1)
tail(y1)
tmp <- -1.0
x <- data.frame()
for (i in 1:20001){
x[i,1] <- tmp
tmp <- tmp + (1 / 10000)
}
y1 <- data.frame()
y2 <- data.frame()
for(i in 1:20001){
y1[i,1] <- if(x[i,1] < 0){
-(-x[i,1])^(2/3) + sqrt(1 - x[i,1]^2)
} else {
(x[i,1])^(2/3) + sqrt(1 - x[i,1]^2)
}
y2[i,1] <- if(x[i,1] < 0){
-(-x[i,1])^(2/3) - sqrt(1 - x[i,1]^2)
} else {
(x[i,1])^(2/3) - sqrt(1 - x[i,1]^2)
}
}
final <- cbind(x, y1, y2)
names(final) <- c("x", "ypos", "yneg")
head(final)
tail(final)
plot(x = final$x, y = final$ypos, ylim = c(-1, 1.5))
points(x = final$x, y = final$yneg)
y1 <- data.frame()
y2 <- data.frame()
for(i in 1:20001){
y1[i,1] <- if(x[i,1] < 0){
(-x[i,1])^(2/3) + sqrt(1 - x[i,1]^2)
} else {
(x[i,1])^(2/3) + sqrt(1 - x[i,1]^2)
}
y2[i,1] <- if(x[i,1] < 0){
(-x[i,1])^(2/3) - sqrt(1 - x[i,1]^2)
} else {
(x[i,1])^(2/3) - sqrt(1 - x[i,1]^2)
}
}
final <- cbind(x, y1, y2)
names(final) <- c("x", "ypos", "yneg")
plot(x = final$x, y = final$ypos, ylim = c(-1, 1.5))
points(x = final$x, y = final$yneg)
## R-Code to generate the following equation
## y = x^(2/3) +/- sqrt(1 - x^2)
## In plain language, y equals x to the two-thirds plus or minus the square-
## root of one minus x squared
## Generate the x data to be plotted - this creates 20,001 x values
## x cannot be less than -1 or greater than 1 (lower or higher will create
## negative values in the square root... a no-no)
tmp <- -1.0
x <- data.frame()
for (i in 1:20001){
x[i,1] <- tmp
tmp <- tmp + (1 / 10000)
}
## I've created two y variables - one to handle the "plus" in the plus-or-minus
## statement and one to handle the minus.
y1 <- data.frame()
y2 <- data.frame()
## This loop generates the y values - the reason for the if statment is for some
## reason, R did not like the negative values getting raised to the 2/3 power
for(i in 1:20001){
y1[i,1] <- if(x[i,1] < 0){
(-x[i,1])^(2/3) + sqrt(1 - x[i,1]^2)
} else {
(x[i,1])^(2/3) + sqrt(1 - x[i,1]^2)
}
y2[i,1] <- if(x[i,1] < 0){
(-x[i,1])^(2/3) - sqrt(1 - x[i,1]^2)
} else {
(x[i,1])^(2/3) - sqrt(1 - x[i,1]^2)
}
}
## combine the values into a single data frame and name them appropriately
final <- cbind(x, y1, y2)
names(final) <- c("x", "ypos", "yneg")
## plot the result!
plot(x = final$x, y = final$ypos, ylim = c(-1, 1.5))
points(x = final$x, y = final$yneg)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
generate_hearts()
source('~/.active-rstudio-document', echo=TRUE)
plot_a_heart()
source('~/.active-rstudio-document', echo=TRUE)
plot_a_heart()
primes <- data.frame()
primes <- data.frame()
counter <- 1
for(i in 2:100){
for(j in 2:i){
if(i %% j == 0 & i != j){
next
} else {
primes[counter, 1] <- i
counter = counter + 1
}
}
}
primes <- data.frame()
counter <- 1
for(i in 2:100){
for(j in 2:i){
if(i %% j == 0 & i != j){
next
} else {
primes[counter, 1] <- i
}
}
counter = counter + 1
}
primes
i <- 5
j <- 2
i %% j
i != j
primes <- data.frame()
counter <- 1
for(i in 1:100){
for(j in 2:i){
if(i %% j == 0){
primes[counter, 1] <- i
counter = counter + 1
} else {
next
}
}
}
primes
head(primes)
100 %% 1
100 %% 3
primes <- data.frame()
place <- 1
for(i in 1:100){
counter <- 1
for(j in 1:i){
if(i %% j == 0){
counter = counter + 1
}
}
if(counter <= 2){
primes[place, 1] <- i
}
}
primes <- data.frame()
place <- 1
for(i in 1:100){
counter <- 1
for(j in 1:i){
if(i %% j == 0){
counter = counter + 1
}
}
if(counter <= 2){
primes[place, 1] <- i
place = place + 1
}
}
primes
primes <- data.frame()
place <- 1
for(i in 2:100){
counter <- 1
for(j in 1:i){
if(i %% j == 0){
counter = counter + 1
}
}
if(counter <= 2){
primes[place, 1] <- i
place = place + 1
}
}
primes <- data.frame()
place <- 1
for(i in 2:100){
counter <- 1
for(j in 1:i){
if(i %% j == 0){
print(j)
counter = counter + 1
}
}
if(counter <= 2){
primes[place, 1] <- i
place = place + 1
}
}
primes <- data.frame()
place <- 1
for(i in 2:100){
counter <- 0
for(j in 1:i){
if(i %% j == 0){
print(j)
counter = counter + 1
}
}
if(counter <= 2){
primes[place, 1] <- i
place = place + 1
}
}
primes
primes <- data.frame()
place <- 1
for(i in 2:100000000){
counter <- 0
for(j in 1:i){
if(i %% j == 0){
counter = counter + 1
}
}
if(counter <= 2){
primes[place, 1] <- i
place = place + 1
}
}
primes <- data.frame()
place <- 1
for(i in 2:10000){
counter <- 0
for(j in 1:i){
if(i %% j == 0){
counter = counter + 1
}
}
if(counter <= 2){
primes[place, 1] <- i
place = place + 1
}
}
head(primes)
tail(primes)
primes <- data.frame()
place <- 1
for(i in 2:100000){
counter <- 0
for(j in 1:i){
if(i %% j == 0){
counter = counter + 1
}
}
if(counter <= 2){
primes[place, 1] <- i
place = place + 1
}
}
head(primes)
tail(primes)
creating_primes <- function(start = 2, end = 10000, output_results = FALSE){
start <- if(start < 2){
2
} else {
start
}
end <- if(end < start){
start
} else {
end
}
primes <- data.frame()
place <- 1
for(i in start:100000){
counter <- 0
for(j in 1:i){
if(i %% j == 0){
counter = counter + 1
}
}
if(counter <= 2){
primes[place, 1] <- i
place = place + 1
}
}
if(output_results == TRUE){
write.csv(primes, "primes.csv", row.names = FALSE)
}
return primes
}
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
primes <- creating_primes()
source('~/.active-rstudio-document', echo=TRUE)
primes <- creating_primes()
head(primes)
tail(primes)
system("python \"Google Drive/Grad School/Programming Practice/creating_primes/creating_primes.py\"")
system("python \"Google Drive/Grad School/Programming Practice/creating_primes/creating_primes.py\"")
start <- 1
start <- 2
end <- 100
primes <- data.frame()
place <- 1
for(i in start:end){
#counter <- 0
for(j in 1:i){
if((i %% j == 0) && (i != 1 | i != j)){
break
}
}
if(counter <= 2){
primes[place, 1] <- i
place = place + 1
}
}
primes <- data.frame()
place <- 1
for(i in start:end){
#counter <- 0
for(j in 1:i){
if((i %% j == 0) & (i != 1 | i != j)){
break
}
}
if(counter <= 2){
primes[place, 1] <- i
place = place + 1
}
}
i <- 1
j <- 10
(i %% j == 0) & (i != 1 || i != j)
i <- 2
(i %% j == 0) & (i != 1 || i != j)
i <- 10
j <- 1
(i %% j == 0) & (i != 1 || i != j)
(i %% j == 0) & (j != 1 || i != j)
(i %% j == 0) & (j != 1) & (i != j))
(i %% j == 0) & (j != 1) & (i != j)
j <- 2
(i %% j == 0) & (j != 1) & (i != j)
j <- 3
i <- 1
(i %% j == 0) & (j != 1) & (i != j)
i <- 2
(i %% j == 0) & (j != 1) & (i != j)
i <- 3
(i %% j == 0) & (j != 1) & (i != j)
primes <- data.frame()
place <- 1
for(i in start:end){
#counter <- 0
for(j in 1:i){
if((i %% j == 0) & (j != 1) & (i != j)){
break
}
}
if(counter <= 2){
primes[place, 1] <- i
place = place + 1
}
}
primes <- data.frame()
place <- 1
for(i in start:end){
#counter <- 0
for(j in 1:i){
if((i %% j == 0) & (j != 1) & (i != j)){
break
}
if (i == j){
primes[place, 1] <- i
place = place + 1
}
}
}
primes
source('~/Google Drive/Grad School/Programming Practice/creating_primes/creating_primes.R', echo=TRUE)
primes <- creating_primes()
primes <- creating_primes(2, 100000, FALSE)
head(primes)
tail(primes)
primes <- creating_primes(end = 100000)
install.packages("gRbase")
library(gRbase)
install.packages("OpenStreetMap")
library(OpenStreetMaps)
library(OpenStreetMap)
pnorm(77, mean = 75, sd = .5)
pnorm(73, mean = 75, sd = .5)
0.9999683 - 3.167124e-05
15/16
pnorm(2, mean = 0, sd = (4/3))
pnorm(-2, mean = 0, sd = (4/3))
0.9331928 - 0.0668072
1.645^2
1.645^2 * 4.5 / 2
library(devtools)
install.packages("devtools")
install.packages("OpenStreetMap")
install.packages("rgdal")
install.packages("rgdal")
install.packages("OpenStreetMap")
library(OpenStreetMap)
install.packages("rJava")
library(OpenStreetMap)
library(rJava)
library(OpenStreetMap)
sqrt(16) / sqrt(64)
install.packages("rattle")
install.packages("rattle")
install.packages("rattle")
remove.packages("rattle")
install.packages("rattle")
remove.packages("rattle")
install.packages("Rgtk", dependencies = TRUE, type = "mac.binary.mavericks", lib = "/Users/jrozra200/Library/R/3.2/library")
install.packages("RGtk2", dependencies = TRUE, type = "mac.binary.mavericks", lib = "/Users/jrozra200/Library/R/3.2/library")
install.packages("RGtk2", dependencies = TRUE, type = "mac.binary", lib = "/Users/jrozra200/Library/R/3.2/library")
install.packages("~/Desktop/RGtk2_2.20.31.tgz", repos = NULL, type = .Platform$pkgType)
library(RGtk2)
library(RGtk2)
install.packages("rattle")
library(RGtk2)
library(RGtk2)
library(RGtk2)
library(RGtk2)
remove.packages("RGtk2")
remove.packages("cairoDevice")
remove.packages("cairoDevice")
install.packages("RGtk2", dependencies = TRUE, type = "mac.binary")
install.packages("RGtk2", dependencies = TRUE, type = "mac.binary")
install.packages("~/Desktop/RGtk2_2.20.31.tgz", repos = NULL, type = .Platform$pkgType)
library(RGtk2)
library(RGtk2)
install.packages("~/Desktop/RGtk2_2.20.31.tgz", repos = NULL, type = .Platform$pkgType)
library(RGtk2)
library(RGtk2)
install.packages("rattle")
install.packages("rattle")
install.packages("rattle")
install.packages("rattle")
pchisq(1, 4)
qchisq(.95, df=7)
pchisq(14.06714, 7)
qchisq(.975, 20)
qchisq(.975, 20, lower.tail = FALSE)
pchisq(9.5908, 20)
pchisq(34.1696, 20) - pchisq(9.5908, 20)
pchisq(1, 4)
pchisq(1, 4,lower.tail = TRUE)
pchisq(1, 1,lower.tail = TRUE)
pchisq(1, 10,lower.tail = TRUE)
qchisq(0.975, 19)
qchisq(0.975, 19, lower.tail = FALSE)
install.packages("kknn")
install.packages("knn")
install.packages("class")
amazonData <- read.csv("amazonData.csv")
setwd("~/Google Drive/Grad School/Programming Practice/RJMetrics Interview/")
amazonData <- read.csv("amazonData.csv")
amazonData <- read.csv("amazonReviews.csv")
head(amazonData)
summary(amazonData)
unique(amazonData$helpfulness)
numlevels <- length(unique(amazonData$helpfulness))
